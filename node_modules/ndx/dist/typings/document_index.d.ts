/**
 * BM25 Ranking function constants.
 */
export interface BM25Options {
    /**
     * Controls non-linear term frequency normalization (saturation).
     *
     * Default value: 1.2
     */
    readonly k1?: number;
    /**
     * Controls to what degree document length normalizes tf values.
     *
     * Default value: 0.75
     */
    readonly b?: number;
}
/**
 * Document Index options.
 */
export interface DocumentIndexOptions {
    /**
     * Tokenizer is a function that breaks a text into words, phrases, symbols, or other meaningful elements called
     * tokens.
     *
     * Default tokenizer breaks words on spaces, tabs, line feeds and assumes that contiguous nonwhitespace characters
     * form a single token.
     */
    readonly tokenizer?: (query: string) => string[];
    /**
     * Filter is a function that processes tokens and returns terms, terms are used in Inverted Index to index documents.
     *
     * Default filter transforms all characters to lower case and removes all non-word characters at the beginning and
     * the end of a term.
     */
    readonly filter?: (term: string) => string;
    /**
     * BM25 Ranking function constants.
     */
    readonly bm25?: BM25Options;
}
/**
 * Field Options.
 */
export interface FieldOptions<D> {
    /**
     * Getter is a function that will be used to get value for this field. If getter function isn't specified, field name
     * will be used to get value.
     */
    readonly getter?: (document: D) => string;
    /**
     * Score boosting factor.
     */
    readonly boost?: number;
}
/**
 * Search Result.
 */
export interface SearchResult<I> {
    readonly docId: I;
    score: number;
}
export declare function DEFAULT_FILTER(term: string): string;
/**
 * Document Index.
 */
export declare class DocumentIndex<I, D> {
    private readonly _documents;
    private readonly _index;
    private readonly _fields;
    private readonly _tokenizer;
    private readonly _filter;
    private readonly _bm25k1;
    private readonly _bm25b;
    constructor(options?: DocumentIndexOptions);
    /**
     * Returns number of indexed document.
     */
    readonly size: number;
    /**
     * Create Field Index.
     */
    addField(fieldName: string, options?: FieldOptions<D>): void;
    /**
     * Add document to the index.
     */
    add(documentId: I, document: D): void;
    /**
     * Remove document from the index.
     */
    remove(documentId: I): void;
    /**
     * Search with a free text query.
     *
     * All token separators work as a disjunction operator.
     */
    search(query: string): SearchResult<I>[];
    /**
     * Expand term with all possible combinations.
     */
    expandTerm(term: string): string[];
    /**
     * Convert query to an array of terms.
     */
    queryToTerms(query: string): string[];
    /**
     * Remove outdated/removed documents from the index.
     */
    vacuum(): void;
}
