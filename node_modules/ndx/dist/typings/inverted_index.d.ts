import { DocumentDetails } from "./document";
export interface DocumentPointer<I> {
    next: DocumentPointer<I> | null;
    readonly details: DocumentDetails<I>;
    readonly termFrequency: number[];
}
/**
 * Trie Node.
 */
export declare class InvertedIndexNode<I> {
    readonly charCode: number;
    next: InvertedIndexNode<I> | null;
    firstChild: InvertedIndexNode<I> | null;
    firstPosting: DocumentPointer<I> | null;
    constructor(charCode: number);
}
/**
 * Inverted Index implemented with a trie data structure.
 */
export declare class InvertedIndex<I> {
    private readonly root;
    constructor();
    /**
     * Get trie node that matches the `term`.
     */
    get(term: string): InvertedIndexNode<I> | null;
    add(term: string, docDetails: DocumentDetails<I>, termFrequency: number[]): void;
    /**
     * Expand term with all indexed terms.
     */
    expandTerm(term: string): string[];
    /**
     * Remove outdated/removed documents from the index.
     */
    vacuum(): void;
}
